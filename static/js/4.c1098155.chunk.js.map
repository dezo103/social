{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.js","hoc/WithAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","component","validators","text","validate","required","value","undefined","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","to","DialogItem","path","id","dialog","active","Message","message","maxLength50","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","dialogsPage","dialogsElements","dialogsData","map","d","messagesElements","messages","m","dialogs","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageAC"],"mappings":"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","file":"static/js/4.c1098155.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__q_x2r\",\"error\":\"FormsControls_error__1oD5g\",\"formSummaryError\":\"FormsControls_formSummaryError__2FR6z\"};","import React from 'react';\r\n\r\nimport s from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validators: any, props = {}, text = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}/> {text}\r\n    </div>\r\n}","export const required = value => {\r\n    return value ? undefined : 'field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return value.length > maxLength ? `max length is ${maxLength} symbols` : undefined\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if(!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2K_Xz\",\"dialogsItems\":\"Dialogs_dialogsItems__2gHO3\",\"messages\":\"Dialogs_messages__3MwGm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItem_dialogsItems__1Zolc\",\"active\":\"DialogItem_active__2rHk1\"};","import s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogsItemType = {\r\n    name: string\r\n    id: number\r\n}\r\nconst DialogItem = (props: DialogsItemType) => {\r\n\r\n    let path = `/dialogs/${props.id}`\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","import s from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\nconst Message = (props:MessageType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nimport {dialogsPageType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (text: string) => void\r\n    dialogsPage: dialogsPageType\r\n    sendMessage: (newMessageBody: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsData.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>)\r\n\r\n\r\n    const addNewMessage = (values: addMessageFormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n   if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype addMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<addMessageFormDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name=\"newMessageBody\"\r\n                   validate={[required, maxLength50]}\r\n                   placeholder=\"Enter message\"/>\r\n            <button>add message</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm<addMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs\r\n","import React, {ComponentType} from 'react';\r\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {DialogsDataType, MessagesType} from \"../../redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\nexport type dialogsPageType = {\r\n    dialogsData: DialogsDataType\r\n    messages: MessagesType\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {dispatch(sendMessageAC(newMessageBody))}\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs)\r\n"],"sourceRoot":""}