{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.js","hoc/WithAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","component","validators","text","validate","required","value","undefined","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","to","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","onStatusChange","onDoubleClick","ProfileInfo","profile","descriptionBlock","src","photos","large","alt","aboutMe","fullName","lookingForAJobDescription","lookingForAJob","Preloader","Post","item","message","likesCount","MyPosts","React","memo","postsElements","postData","map","p","postsBlock","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","posts","maxLength10","reduxForm","form","handleSubmit","Field","MyPostsContainer","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/5.44d32bf1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__q_x2r\",\"error\":\"FormsControls_error__1oD5g\",\"formSummaryError\":\"FormsControls_formSummaryError__2FR6z\"};","import React from 'react';\r\n\r\nimport s from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validators: any, props = {}, text = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}/> {text}\r\n    </div>\r\n}","export const required = value => {\r\n    return value ? undefined : 'field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return value.length > maxLength ? `max length is ${maxLength} symbols` : undefined\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if(!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__gPdx2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3oVUa\",\"posts\":\"MyPosts_posts__3HRhM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__N75IJ\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: any) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status!'}</span>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        value={status}\r\n                        onBlur={deactivateEditMode}\r\n                        autoFocus={true}\r\n                        onChange={(e) => onStatusChange(e)}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = (props: any) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=\"photo\"/>\r\n                <ProfileStatusWithHooks status={props.status}\r\n                               updateStatus={props.updateStatus}/>\r\n                <p>{props.profile.aboutMe}</p>\r\n                <p>{props.profile.fullName}</p>\r\n                <p>{props.profile.lookingForAJobDescription}</p>\r\n                <p>{props.profile.lookingForAJob ? 'Да, ищу' : 'Неа'}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.arstechnica.net/wp-content/uploads/2016/02/5718897981_10faa45ac3_b-640x624.jpg\"\r\n                 alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {postDataType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    postData: postDataType\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.postData.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const addPost = (values: addNewPostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={addPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport const maxLength10 = maxLengthCreator(10)\r\n\r\ntype addNewPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const AddNewPostsForm: React.FC<InjectedFormProps<addNewPostFormDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name=\"newPostText\"\r\n                   validate={[required, maxLength10]}\r\n                   placeholder=\"Enter post\"/>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddNewPostReduxForm = reduxForm<addNewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostsForm)\r\n\r\n\r\nexport default MyPosts;\r\n\r\n","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {PostType} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type postDataType = Array<PostType>\r\n\r\ntype MapStatePropsType = {\r\n    postData: postDataType\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        postData: state.profilePage.postData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {dispatch(addPostAC(newPostText))}\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\ntype mapStatePropsType = {\r\n    profile: any,\r\n    status: string,\r\n    authorizedUserId: number,\r\n    isAuth: any\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    setUserProfile: (profile: any) => void\r\n}\r\n\r\nexport type ProfilePropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<any>{\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId\r\n            // if(!userId) {\r\n            //     this.props.history.push('/login')\r\n            // }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: any): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}