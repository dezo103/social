{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.js","components/Login/Login.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","component","validators","text","validate","required","value","undefined","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","style","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,0PCKrHC,EAAc,SAAC,GAAmD,EAAlDC,MAAmD,IAAD,IAA3CC,KAAOC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAQC,EAAmB,EAAnBA,SAC3CC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACI,8BACKC,IAEJC,GAAY,+BAAOF,QAKnBM,EAAW,SAACC,GACrB,IAAOV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MAApB,YAA2CF,EAA3C,IACA,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aACH,oDAAcV,GAAWW,QAIpBE,EAAQ,SAACH,GAClB,IAAOV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MAApB,YAA2CF,EAA3C,IACA,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aACH,iDAAWV,GAAWW,QAIjBG,EAAc,SAACC,EAA4BC,EAAcC,EAAgBC,GAA4C,IAA3BR,EAA0B,uDAAlB,GAAIS,EAAc,uDAAP,GACtH,OAAO,gCACH,cAAC,IAAD,aAAOJ,YAAaA,EACbC,KAAMA,EACNC,UAAWA,EACXG,SAAUF,GACNR,IALR,IAKkBS,O,iCCtC7B,oEAAO,IAAME,EAAW,SAAAC,GACpB,OAAOA,OAAQC,EAAY,qBAIlBC,EAAmB,SAACC,GAAD,OAAe,SAACH,GAC5C,OAAOA,EAAMI,OAASD,EAAf,wBAA4CA,EAA5C,iBAAkEF,K,iCCN7E,2FAgDMI,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EA9BsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAc3B,EAAW,EAAXA,MACzE,OACI,uBAAM4B,SAAUD,EAAhB,UAKKhB,YAAY,QAAS,QAASD,IAAO,CAACQ,MAKtCP,YAAY,WAAY,WAAYD,IAAO,CAACQ,KAAW,CAACW,KAAM,aAK9DlB,YAAY,KAAM,aAAcD,IAAO,GAAI,CAACmB,KAAM,YAAa,cAC/D7B,GACG,qBAAKG,UAAa2B,IAAMC,iBAAxB,SACK/B,IAGT,8BACI,mDA2BDgC,uBAJS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,WAA1BJ,EAnBD,SAACzB,GAIX,OAAOA,EAAM2B,OACX,cAAC,IAAD,CAAUG,GAAI,aACd,gCACM,uCAGA,cAACb,EAAD,CAAgBI,SATP,SAACU,GACd/B,EAAM6B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.81e657a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__q_x2r\",\"error\":\"FormsControls_error__1oD5g\",\"formSummaryError\":\"FormsControls_formSummaryError__2FR6z\"};","import React from 'react';\r\n\r\nimport s from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validators: any, props = {}, text = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}/> {text}\r\n    </div>\r\n}","export const required = value => {\r\n    return value ? undefined : 'field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return value.length > maxLength ? `max length is ${maxLength} symbols` : undefined\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType, RootStateType} from \"../../redux/redux-store\";\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'email'} name={'email'}*/}\r\n            {/*           component={Input} validate={[required]}/>*/}\r\n            {/*</div>*/}\r\n            {createField('email', 'email', Input, [required])}\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'password'} name={'password'} type={'password'}*/}\r\n            {/*           component={Input} validate={[required]}/>*/}\r\n            {/*</div>*/}\r\n            {createField('password', 'password', Input, [required], {type: 'password'})}\r\n            {/*<div>*/}\r\n            {/*    <Field type={'checkbox'} name={'rememberMe'}*/}\r\n            {/*           component={Input}/>*/}\r\n            {/*</div>*/}\r\n            {createField(null, 'rememberMe', Input, [], {type: 'checkbox'}, 'rememberMe')}\r\n            {error &&\r\n                <div className = {style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    return props.isAuth\r\n    ? <Redirect to={\"/profile\"}/>\r\n    : <div>\r\n            <h1>\r\n                Login\r\n            </h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}