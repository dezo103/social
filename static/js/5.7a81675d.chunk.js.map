{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.js","hoc/WithAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","component","validators","text","validate","required","value","undefined","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","to","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","onStatusChange","onDoubleClick","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","style","formSummaryError","type","Object","keys","profile","contacts","map","key","contact","ProfileData","isOwner","onClick","goToEditMode","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","savePhoto","onMainPhotoSelected","initialValues","formData","saveProfile","then","Post","item","message","likesCount","MyPosts","React","memo","postsElements","postData","p","postsBlock","AddNewPostReduxForm","values","addPost","newPostText","posts","maxLength10","Field","MyPostsContainer","profilePage","dispatch","addPostAC","Profile","ProfileContainer","refreshProfile","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","this","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/5.7a81675d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__q_x2r\",\"error\":\"FormsControls_error__1oD5g\",\"formSummaryError\":\"FormsControls_formSummaryError__2FR6z\"};","import React from 'react';\r\n\r\nimport s from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validators: any, props = {}, text = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validators}\r\n               {...props}/> {text}\r\n    </div>\r\n}","export const required = value => {\r\n    return value ? undefined : 'field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return value.length > maxLength ? `max length is ${maxLength} symbols` : undefined\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if(!isAuth) return <Redirect to={\"/login\"} />\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n};\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__gPdx2\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3E9Go\",\"contact\":\"ProfileInfo_contact__34ogC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3oVUa\",\"posts\":\"MyPosts_posts__3HRhM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__N75IJ\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: any) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || 'no status!'}</span>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        value={status}\r\n                        onBlur={deactivateEditMode}\r\n                        autoFocus={true}\r\n                        onChange={(e) => onStatusChange(e)}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<any>> = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n            {\r\n                props.error &&\r\n                <div className = {style.formSummaryError}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n        <div><p><b>Full name:</b>{createField('Full name', 'fullName', Input, [])}</p></div>\r\n        <div><b>Looking for a job:</b> {createField('', 'lookingForAJob', Input, [], {type: 'checkbox'})}</div>\r\n        <div><b>My professional\r\n            skills:</b>{createField('My professional skills', 'lookingForAJobDescription', Textarea, [])}</div>\r\n        <div><p><b>About me:</b>{createField('About me', 'aboutMe', Textarea, [])}</p></div>\r\n        <div>\r\n            <p><b>Contacts:</b>{Object.keys(props.profile.contacts).map(key => <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, 'contacts.' + key, Input, [])}</b>\r\n                </div>\r\n            )}</p>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<any, any>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = (props: any) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <ProfileStatusWithHooks status={props.status}\r\n                                        updateStatus={props.updateStatus}/>\r\n                <img src={props.profile.photos.large || userPhoto} alt=\"photo\" className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={(e) => onMainPhotoSelected(e)}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm\r\n                        initialValues={props.profile}\r\n                        onSubmit={onSubmit}\r\n                        profile={props.profile}\r\n                    />\r\n                    : <ProfileData profile={props.profile}\r\n                                   isOwner={props.isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}/>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = (props: any) => {\r\n    return <div>\r\n        {props.isOwner && <div>\r\n            <button onClick={props.goToEditMode}>edit</button>\r\n        </div>}\r\n\r\n        <div><p><b>About me:</b>{props.profile.aboutMe}</p></div>\r\n        <div><b>My name is:</b> {props.profile.fullName}</div>\r\n        <div><b>Looking for a job:</b> {props.profile.lookingForAJob || 'No'}</div>\r\n        <div><b>My professional skills:</b> {props.profile.lookingForAJobDescription}</div>\r\n        <div>\r\n            <p><b>Contacts:</b>{Object.keys(props.profile.contacts).map(key =>\r\n                <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>)}</p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const Contact = (props: any) => {\r\n    return <div className={s.contact}>\r\n        <b>{props.contactTitle}</b>: {props.contactValue}\r\n    </div>;\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn.arstechnica.net/wp-content/uploads/2016/02/5718897981_10faa45ac3_b-640x624.jpg\"\r\n                 alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {postDataType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    postData: postDataType\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.postData.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const addPost = (values: addNewPostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={addPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport const maxLength10 = maxLengthCreator(10)\r\n\r\ntype addNewPostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const AddNewPostsForm: React.FC<InjectedFormProps<addNewPostFormDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name=\"newPostText\"\r\n                   validate={[required, maxLength10]}\r\n                   placeholder=\"Enter post\"/>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddNewPostReduxForm = reduxForm<addNewPostFormDataType>({form: 'profileAddNewPostForm'})(AddNewPostsForm)\r\n\r\n\r\nexport default MyPosts;\r\n\r\n","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {PostType} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport type postDataType = Array<PostType>\r\n\r\ntype MapStatePropsType = {\r\n    postData: postDataType\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        postData: state.profilePage.postData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {dispatch(addPostAC(newPostText))}\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {ComponentType} from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\ntype mapStatePropsType = {\r\n    profile: any,\r\n    status: string,\r\n    authorizedUserId: number,\r\n    isAuth: any\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    setUserProfile: (profile: any) => void\r\n}\r\n\r\nexport type ProfilePropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<any> {\r\n\r\n    refreshProfile = () => {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: any): mapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}